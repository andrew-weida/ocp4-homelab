- name: Prepare Hypervisor
  hosts: localhost
  vars_files:
    - ../vars/variables.yaml
    - ../vars/vault-variables.yaml
  tasks:
    - name: Create ssh key on first host
      community.crypto.openssh_keypair:
        path: "{{ ansible_user_dir }}/.ssh/id_rsa"
        type: rsa
        size: 4096
        state: present
        force: false

    - name: Ensure nested virtualization is enabled
      ansible.builtin.copy:
        dest: /etc/modprobe.d/kvm.conf
        content: |
          # Setting modprobe kvm_intel/kvm_amd nested = 1
          # only enables Nested Virtualization until the next reboot or
          # module reload. Uncomment the option applicable
          # to your system below to enable the feature permanently.
          #
          # User changes in this file are preserved across upgrades.
          #
          # For Intel
          options kvm_intel nested=1
          #
          # For AMD
          options kvm_amd nested=1
      register: enable_nested

    - name: Run dracut
      ansible.builtin.shell: |
        dracut -fv
      when:
        - enable_nested.changed

    - name: Reboot in order to enable selinux/nested virtualization
      ansible.builtin.reboot:
        reboot_timeout: "{{ kvm_host.reboot_timeout }}"
      when:
        - enable_nested.changed

    - name: Check selinux status
      ansible.builtin.shell: |
        set -o pipefail && sestatus | egrep '^Current mode:' | sed -E 's/^Current mode:\s+//g'
      register: selinux_status
      changed_when: false
      when:
        - kvm_host.enable_selinux|bool

    - name: Enable SELinux
      ansible.posix.selinux:
        policy: targeted
        state: enforcing
      when:
        - kvm_host.enable_selinux|bool

    - name: Create autorelabel file
      ansible.builtin.file:
        path: /.autorelabel
        state: touch
        mode: '0644'
      when: (kvm_host.enable_selinux | bool and not selinux_status.stdout == "enforcing") or enable_nested.changed

    - name: Reboot in order to enable selinux/nested virtualization
      ansible.builtin.reboot:
        reboot_timeout: "{{ kvm_host.reboot_timeout }}"
      when:
        - kvm_host.enable_selinux|bool
        - not selinux_status.stdout == "enforcing"
        - or enable_nested.changed

    - name: Enable EPEL Repo
      ansible.builtin.dnf:
        name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm
        state: present
        disable_gpg_check: true
      when: ansible_distribution == "RedHat"

    - name: Enable Repo for kcli
      ansible.builtin.shell: |
        dnf -y copr enable karmab/kcli
      changed_when: false

    - name: Install KCLI and related packages
      ansible.builtin.dnf:
        name:
          - kcli
          - bash-completion
          - python3-pyOpenSSL.noarch
          - python3-cherrypy
        state: present

    - name: Install additional required packages
      ansible.builtin.dnf:
        name:
          - tmux
          - nmap
          - tcpdump
          - bind-utils
          - jq
          - tar
          - git
          - net-tools
          - podman
          - tree
          - httpd-tools
          - htop
          - strace
          - cockpit
          - cockpit-machines
          - cockpit-podman
          - firewalld
        state: present

    - name: Install libvirt packages
      ansible.builtin.dnf:
        name:
          - libvirt
          - libvirt-daemon-driver-qemu
          - qemu-kvm
        state: present

    - name: Reload systemd manager configuration
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Ensure a number of services are enabled and started
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - libvirtd
        - podman
        - firewalld
        - cockpit

    - name: Download openshift-client-linux
      ansible.builtin.get_url:
        url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-client-linux.tar.gz"
        dest: /tmp/openshift-client-linux.tar.gz
        mode: '0664'

    - name: Uncompress openshift-client-linux.tar.gz
      ansible.builtin.unarchive:
        src: /tmp/openshift-client-linux.tar.gz"=
        dest: /usr/bin/
        remote_src: true
        creates: /usr/bin/oc
      become: true

    - name: Download openshift-install-linux
      ansible.builtin.get_url:
        url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-install-linux.tar.gz"
        dest: /tmp/openshift-install-linux.tar.gz
        mode: '0664'

    - name: Uncompress openshift-install-linux.tar.gz
      ansible.builtin.unarchive:
        src: /tmp/openshift-install-linux.tar.gz
        dest: /usr/bin/
        remote_src: true
        creates: /usr/bin/openshift-install
      become: true

    - name: Configure sushy emulation
      when: redfish.enable | bool
      block:
        - name: Add sushy-tools user to libvirt group
          ansible.builtin.user:
            name: sushy-tools
            groups: libvirt
            append: true

        - name: Ensure /etc/sushy-emulator directory exists
          ansible.builtin.file:
            path: /etc/sushy-emulator
            state: directory
            mode: '0755'

        - name: Check if auth file exists
          ansible.builtin.stat:
            path: /etc/sushy-emulator/auth_file
          register: auth_file_stat

        - name: Create auth file for sushy-tools
          ansible.builtin.shell: |
            htpasswd -c -B -b /etc/sushy-emulator/auth_file admin {{ secure_password }}
          args:
            creates: /etc/sushy-emulator/auth_file
          when: not auth_file_stat.stat.exists

        - name: Ensure private key is present
          community.crypto.openssl_privatekey:
            path: /etc/sushy-emulator/sushy-tools.key
            size: 2048
            mode: '0640'
            owner: root
            group: sushy-tools
            type: RSA

        - name: Ensure self-signed cert is present
          community.crypto.x509_certificate:
            path: /etc/sushy-emulator/sushy-tools.crt
            privatekey_path: /etc/sushy-emulator/sushy-tools.key
            provider: selfsigned
            selfsigned_not_after: "+3650d" # this is the default
            mode: '0640'

        - name: Configure sushy-emulator.conf
          ansible.builtin.template:
            src: "{{ root_dir }}/templates/sushy-emulator/sushy-emulator.conf.j2"
            dest: /etc/sushy-emulator/sushy-emulator.conf
            owner: root
            group: sushy-tools
            mode: '0640'
            backup: true

        - name: Configure sushy-emulator systemd unit (quadlet)
          ansible.builtin.template:
            src: "{{ root_dir }}/templates/sushy-emulator/sushy-emulator.container.j2"
            dest: /etc/containers/systemd/sushy-emulator.container
            owner: root
            group: sushy-tools
            mode: '0640'
            backup: true

        - name: Restart sushy-emulator service
          ansible.builtin.systemd:
            name: sushy-emulator
            daemon_reload: true
            state: restarted
            enabled: true

        - name: Define ksushy firewalld service
          ansible.builtin.copy:
            dest: /etc/firewalld/services/ksushy.xml
            content: |
              <?xml version="1.0" encoding="utf-8"?>
              <service>
                <short>ksushy</short>
                <description>ksushy service</description>
                <port protocol="tcp" port="{{ redfish.listen_port }}"/>
              </service>
            mode: '0644'

        - name: Reload firewalld
          ansible.builtin.systemd:
            name: firewalld
            state: reloaded

        - name: Add ksushy firewalld service for libvirt zone
          ansible.posix.firewalld:
            zone: libvirt
            service: ksushy
            permanent: true
            state: enabled

    - name: Find unused block devices
      ansible.builtin.shell: |
        set -o pipefail && lsblk -o NAME,FSTYPE -dsn | awk '$2 == "" {print $1}'
      register: unused_devices
      changed_when: false

    - name: Create list of unused devices
      ansible.builtin.set_fact:
        device_list: "{{ unused_devices.stdout_lines | map('regex_replace', '^', '/dev/') | list }}"

    - name: Create new volume for KVM images if needed
      when: device_list | length > 0 and create_lv_from_unused_devices
      become: true
      block:
        - name: Create physical volumes
          ansible.builtin.shell: |
            pvcreate {{ item }}
          with_items: "{{ device_list }}"
          changed_when: false

        - name: Create list of unused devices
          ansible.builtin.set_fact:
            device_list_line: "{{ device_list | join(' ') }}"

        - name: Create volume group
          ansible.builtin.shell: |
            vgcreate vg_vm_images {{ device_list_line }}
          changed_when: false

        - name: Create logical volume
          ansible.builtin.shell: |
            lvcreate -l 100%FREE -n lv_vm_images vg_vm_images
          changed_when: false

        - name: Format logical volume with ext4
          ansible.builtin.shell: |
            mkfs.ext4 /dev/vg_vm_images/lv_vm_images
          changed_when: false

        - name: Create mount point
          ansible.builtin.file:
            path: "{{ image_dir }}"
            state: directory
            mode: '0755'

        - name: Mount the logical volume
          ansible.posix.mount:
            path: "{{ image_dir }}"
            src: /dev/vg_vm_images/lv_vm_images
            fstype: ext4
            state: mounted

        - name: Update /etc/fstab
          ansible.builtin.lineinfile:
            path: /etc/fstab
            line: "/dev/vg_vm_images/lv_vm_images {{ image_dir }} ext4 defaults 0 1"
            create: true
            mode: '0640'

    - name: Install HAProxy for ingress to cluster from outside Hypervisor
      ansible.builtin.dnf:
        name:
          - haproxy
        state: present

    - name: Allow https for HAProxy in firewall
      ansible.posix.firewalld:
        zone: public
        service: https
        permanent: true
        state: enabled

    - name: Restart firewalld
      ansible.builtin.systemd:
        name: firewalld
        state: restarted

    - name: Configure HAProxy
      ansible.builtin.template:
        src: "{{ root_dir }}/templates/ha-proxy.cfg.j2"
        dest: /etc/haproxy/haproxy.cfg
        backup: true
        mode: '0600'

    - name: Enable and start HAProxy
      ansible.builtin.systemd:
        name: haproxy
        enabled: true
        state: started
